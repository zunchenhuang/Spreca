#!/usr/bin/python

import os
import sys
from collections import namedtuple
import math

readLogPath = sys.argv[1]
setNum = sys.argv[2]
windowSize = sys.argv[3]

# Type: 0 for load; 1 for store.
MemOp = namedtuple("MemOp", "Type Addr ID DebugInfo")
# All MemOps
memOps = []
# Set of mem operations
cacheSetOutput = {}
cacheSetIDs = {}
for i in range(0, int(setNum)):
    cacheSetOutput[i] = []
    cacheSetIDs[i] = set()

CUR_FOLDER = os.path.dirname(os.path.abspath(__file__))
readLog = os.path.join(CUR_FOLDER, readLogPath)
IDtoMemOp = {}

HB = []

def transitive_closure(a):
    closure = set(a)
    while True:
        new_relations = set((x,w) for x,y in closure for q,w in closure if q == y)

        closure_until_now = closure | new_relations

        if closure_until_now == closure:
            break

        closure = closure_until_now

    return closure

with open(readLog, "r") as readL:
    for line in readL:
        strs = line.split()
#      print(strs)
        if len(strs) == 6:
            addr = int(strs[1], 16)
            memOps.append(line)
            # addr = addr >> 2
            # writeL.write(strs[0] + " " + str(hex(addr)) + " " + strs[2] + " " + strs[3] + " " + strs[4] + " " + strs[5] + "\n")
        elif len(strs) == 5:
        # writeL.write(line)
            HB.append((strs[2], strs[4]))

print(memOps)
print(HB)
print(len(HB))
HB_trans = transitive_closure(HB)
HB_trans_map = {}
HA_trans_map = {}
# for hb in HB_trans:
#     if hb[0] in HB_trans_map.keys():
#         HB_trans_map[hb[0]].append(hb[1])
#     else:
#         HB_trans_map[hb[0]] = [hb[1]]
# print(HB_trans_map)

for hb in HB_trans:
    if hb[0] != hb[1]:
        if hb[1] in HA_trans_map.keys():
            HA_trans_map[hb[1]].append(hb[0])
        else:
            HA_trans_map[hb[1]] = [hb[0]]
print(HA_trans_map)

mask = (1 << int(math.log2(int(setNum)))) - 1
print(mask)

for line in memOps:
     strs = line.split()
     addrStr = strs[1]
     ID = strs[3]
     addr = int(addrStr, 16)
     setIndex = addr & mask
     cacheSetIDs[setIndex].add(ID)

print(cacheSetIDs)

for line in memOps:
     strs = line.split()
     addrStr = strs[1]
     ID = strs[3]
     addr = int(addrStr, 16)
     setIndex = addr & mask
     tag = addr >> int(math.log2(int(setNum)))
     print([hex(addr), setIndex, hex(tag)])
     print([bin(addr), setIndex, bin(tag)])
     cacheSetOutput[setIndex].append(strs[0] + " " + str(hex(tag)) + " " + strs[2] + " " + strs[3] + " " + strs[4] + " " + strs[5])
     if ID in HA_trans_map.keys():
         for item in HA_trans_map[ID]:
             if item in cacheSetIDs[setIndex]:
                 cacheSetOutput[setIndex].append("DDEP: SrcID: " + str(item) + " DestID: " + ID)

readLogName = readLogPath.split(".")[0]
print(readLogName)
for i in range(0, int(setNum)):
    writeLog = readLogName + "_" + setNum + "sets_" + str(i) + ".log"
    with open(writeLog, "w") as writeL:
        for line in cacheSetOutput[i]:
            writeL.write(line+"\n")
    writeL.close()
